<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ncu.mfc.mapper.GradeMapper" >
  <resultMap id="BaseResultMap" type="com.ncu.mfc.model.Grade" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="sno" property="sno" jdbcType="CHAR" />
    <id column="cno" property="cno" jdbcType="CHAR" />
    <result column="degree" property="degree" jdbcType="CHAR" />
  </resultMap>
  <!--成绩详细信息-->
  <resultMap id="DegreeResultMap" type="com.ncu.mfc.model.Degree" >
    <id column="cno" property="cno" jdbcType="CHAR" />
    <id column="cname" property="cname" jdbcType="CHAR" />
    <id column="sno" property="sno" jdbcType="CHAR" />
    <id column="sname" property="sname" jdbcType="CHAR" />
    <id column="degree" property="score" jdbcType="CHAR" />
    <id column="credit" property="credit" jdbcType="CHAR" />
    <id column="ctype" property="ctype" jdbcType="CHAR" />
  </resultMap>

  <!--成绩分析信息-->
  <resultMap id="AnalyseResultMap" type="com.ncu.mfc.model.Level" >
    <id column="fails" property="fails" jdbcType="CHAR" />
    <id column="good" property="good" jdbcType="CHAR" />
    <id column="excellence" property="excellence" jdbcType="CHAR" />
    <id column="avgGra" property="avgGra" jdbcType="CHAR" />
    <id column="maxGra" property="maxGra" jdbcType="CHAR" />
    <id column="minGra" property="minGra" jdbcType="CHAR" />
  </resultMap>

  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    sno, cno, degree
  </sql>
  <!--查询成绩详细信息-->
  <select id="selectDegree" resultMap="DegreeResultMap" parameterType="com.ncu.mfc.model.GradeKey" >
    select course.cno,course.cname,student.sno,student.sname,
    grade.degree degree,if(degree &lt; 60||degree='D','0',course.credit) as credit,course.ctype
    from grade,course,student
    where grade.cno=course.cno and grade.sno=student.sno

  </select>
  <!--根据课程编号和学号查询成绩详细信息-->
  <select id="selectGraByCnoAndSno" resultMap="DegreeResultMap" parameterType="com.ncu.mfc.model.GradeKey" >
    select course.cno,course.cname,student.sno,student.sname,
    grade.degree degree,if(degree &lt; 60||degree='D','0',course.credit) as credit,course.ctype
    from grade,course,student
    where grade.cno=course.cno and grade.sno=student.sno
    and grade.sno = #{sno,jdbcType=CHAR}
      and grade.cno = #{cno,jdbcType=CHAR}

  </select>

  <!--根据教师职工号查询教授课程的所有成绩详细信息-->
  <select id="selectGraByTno" resultMap="DegreeResultMap" parameterType="com.ncu.mfc.model.GradeKey" >
     select course.cno,course.cname,student.sno,student.sname,
    grade.degree degree,if(degree &lt; 60||degree='D','0',course.credit) as credit,course.ctype
    from grade,course,student,teach_class,teacher
    where grade.cno=course.cno and grade.sno=student.sno and teacher.tno = teach_class.teano
			and teach_class.cno = grade.cno
			and teacher.tno=#{tno}
  </select>


  <select id="selectGraByTnoBtn" resultMap="DegreeResultMap" parameterType="com.ncu.mfc.dto.GradeTnoBtn" >

    select course.cno,course.cname,student.sno,student.sname,
    grade.degree degree,if(degree &lt; 60||degree='D','0',course.credit) as credit,course.ctype
    from grade,course,student,teach_class,teacher
    where grade.cno=course.cno and grade.sno=student.sno and teacher.tno = teach_class.teano
    and teach_class.cno = grade.cno
    and teacher.tno=#{tno}
    <if test="cname != '' and cname != null" >
      and cname LIKE "%"#{cname}"%"
    </if>
    <if test="cname == '' or cname == null">
      <if test="ctype != '==请选择=='">
        and ctype = #{ctype}
      </if>
    </if>
    <if test="compare != '' and compare != null" >
      and degree ${compare} 60
    </if>
  </select>

  <!--查询全部成绩的及格，不及格与优秀的比例-->
  <select id="analyseAllGrade" resultMap="AnalyseResultMap">
    SELECT AVG(grade.degree) AS avgGra,MAX(grade.degree) AS maxGra, MIN(grade.degree) AS minGra,
    SUM(CASE WHEN grade.degree &lt; 60 || grade.degree = 'D' THEN 1 ELSE 0 END)/COUNT(1)*100 AS fails,
    SUM(CASE WHEN grade.degree &gt;= 60 &amp;&amp; grade.degree &lt; 80 || grade.degree = 'B' || grade.degree = 'C' THEN 1 ELSE 0 END)/COUNT(1)*100 AS good,
    SUM(CASE WHEN grade.degree &gt;= 80 || grade.degree = 'A' THEN 1 ELSE 0 END)/COUNT(1)*100 AS excellence
    FROM grade
  </select>

  <!--查询指定课程的及格，不及格与优秀的比例-->
  <select id="analyseGrade" resultMap="AnalyseResultMap" parameterType="java.lang.String">
    SELECT AVG(grade.degree) AS avgGra,MAX(grade.degree) AS maxGra, MIN(grade.degree) AS minGra,
    SUM(CASE WHEN grade.degree &lt; 60 || grade.degree = 'D' THEN 1 ELSE 0 END)/COUNT(1)*100 AS fails,
    SUM(CASE WHEN grade.degree &gt;= 60 &amp;&amp; grade.degree &lt; 80 || grade.degree = 'B' || grade.degree = 'C' THEN 1 ELSE 0 END)/COUNT(1)*100 AS good,
    SUM(CASE WHEN grade.degree &gt;= 80 || grade.degree = 'A' THEN 1 ELSE 0 END)/COUNT(1)*100 AS excellence
    FROM grade,course
    WHERE grade.cno = course.cno and course.cname=#{cname,jdbcType=CHAR}
  </select>

  <!--查询指定老师所有课程的及格，不及格与优秀的比例-->
  <select id="analyseGradeByTno" resultMap="AnalyseResultMap" parameterType="java.lang.String">
    SELECT AVG(grade.degree) AS avgGra,MAX(grade.degree) AS maxGra, MIN(grade.degree) AS minGra,
    SUM(CASE WHEN grade.degree &lt; 60 || grade.degree = 'D' THEN 1 ELSE 0 END)/COUNT(1)*100 AS fails,
    SUM(CASE WHEN grade.degree &gt;= 60 &amp;&amp; grade.degree &lt; 80 || grade.degree = 'B' || grade.degree = 'C' THEN 1 ELSE 0 END)/COUNT(1)*100 AS good,
    SUM(CASE WHEN grade.degree &gt;= 80 || grade.degree = 'A' THEN 1 ELSE 0 END)/COUNT(1)*100 AS excellence
    FROM grade,course,teach_class
    WHERE teach_class.cno=course.cno and grade.cno = course.cno and teach_class.teano=#{teano,jdbcType=CHAR}
  </select>

  <!--查询指定老师指定课程的及格，不及格与优秀的比例-->
  <select id="analyseGradeByTnoAndCname" resultMap="AnalyseResultMap" parameterType="com.ncu.mfc.dto.CnameAndTno">
     SELECT AVG(grade.degree) AS avgGra,MAX(grade.degree) AS maxGra, MIN(grade.degree) AS minGra,
    SUM(CASE WHEN grade.degree &lt; 60 || grade.degree = 'D' THEN 1 ELSE 0 END)/COUNT(1)*100 AS fails,
    SUM(CASE WHEN grade.degree &gt;= 60 &amp;&amp; grade.degree &lt; 80 || grade.degree = 'B' || grade.degree = 'C' THEN 1 ELSE 0 END)/COUNT(1)*100 AS good,
    SUM(CASE WHEN grade.degree &gt;= 80 || grade.degree = 'A' THEN 1 ELSE 0 END)/COUNT(1)*100 AS excellence
    FROM grade,course,teach_class
    WHERE teach_class.cno=course.cno and grade.cno = course.cno
			and course.cname=#{cname}
			and teach_class.teano=#{tno}

  </select>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.ncu.mfc.model.GradeKey" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from grade
    where sno = #{sno,jdbcType=CHAR}
      and cno = #{cno,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.ncu.mfc.model.GradeKey" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from grade
    where sno = #{sno,jdbcType=CHAR}
      and cno = #{cno,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="com.ncu.mfc.model.Grade" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into grade (sno, cno, degree)
    values (#{sno,jdbcType=CHAR}, #{cno,jdbcType=CHAR}, #{degree,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.ncu.mfc.model.Grade" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into grade
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="sno != null" >
        sno,
      </if>
      <if test="cno != null" >
        cno,
      </if>
      <if test="degree != null" >
        degree,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="sno != null" >
        #{sno,jdbcType=CHAR},
      </if>
      <if test="cno != null" >
        #{cno,jdbcType=CHAR},
      </if>
      <if test="degree != null" >
        #{degree,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ncu.mfc.model.Grade" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update grade
    <set >
      <if test="degree != null" >
        degree = #{degree,jdbcType=CHAR},
      </if>
    </set>
    where sno = #{sno,jdbcType=CHAR}
      and cno = #{cno,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ncu.mfc.model.Grade" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update grade
    set degree = #{degree,jdbcType=CHAR}
    where sno = #{sno,jdbcType=CHAR}
      and cno = #{cno,jdbcType=CHAR}
  </update>
</mapper>